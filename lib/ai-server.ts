import { openrouter } from "./openrouter"

// This is a server-only file
export async function generateServerSideCompletion(prompt: string, model = "openai/gpt-3.5-turbo") {
  try {
    // Use OpenRouter instead of OpenAI
    const client = openrouter(model)

    if (!client) {
      console.warn("OpenRouter client creation failed, using mock implementation")
      return mockCompletion(prompt)
    }

    try {
      // Add a timeout for the OpenRouter API call
      const apiPromise = client.createCompletion({
        prompt: prompt,
        model: model,
        max_tokens: 800, // Reduced from 1000 to 800 for faster responses
        temperature: 0.7,
      })

      const timeoutPromise = new Promise(
        (_, reject) => setTimeout(() => reject(new Error("OpenRouter API timeout")), 25000), // Increased from 20 to 25 seconds
      )

      const response = await Promise.race([apiPromise, timeoutPromise])

      return response.choices[0]?.text || ""
    } catch (error) {
      // Check if this is a credit-related error
      if (error instanceof Error && error.message.includes("402")) {
        console.warn("OpenRouter API credit issue, using mock completion")
        return mockCompletion(prompt)
      }

      // Check if this is a timeout error
      if (error instanceof Error && error.message.includes("timeout")) {
        console.warn("OpenRouter API timeout, using mock completion")
        return mockCompletion(prompt)
      }

      // For other errors, rethrow
      throw error
    }
  } catch (error) {
    console.error("Error in generateServerSideCompletion:", error)
    return mockCompletion(prompt)
  }
}

function mockCompletion(prompt: string) {
  console.log("Using mock completion for prompt:", prompt.substring(0, 100) + "...")

  // Return mock data based on what kind of completion is being requested
  if (prompt.includes("article summary") || prompt.includes("comprehensive summary")) {
    return JSON.stringify({
      summary: "This is a mock summary generated because the API call failed.",
      keyInsights: [
        "Mock insight 1: No actual API call was made",
        "Mock insight 2: Check your API keys and configuration",
        "Mock insight 3: This is placeholder content",
        "Mock insight 4: The actual content would be generated by AI",
        "Mock insight 5: Based on the article metadata",
      ],
      relatedTopics: ["Setting up API keys", "API integration", "AI content generation"],
    })
  } else if (prompt.includes("search results")) {
    return JSON.stringify({
      items: [
        {
          title: "Mock Search Result 1",
          snippet: "This is a mock search result description.",
          link: "https://example.com/mock1",
          image: "/placeholder.svg?height=100&width=200",
        },
        {
          title: "Mock Search Result 2",
          snippet: "Another mock search result description.",
          link: "https://example.com/mock2",
          image: "/placeholder.svg?height=100&width=200",
        },
      ],
    })
  }

  return "This is a mock response because the API call failed."
}

